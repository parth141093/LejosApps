import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.port.MotorPort;
import lejos.hardware.port.SensorPort;
import lejos.hardware.sensor.EV3ColorSensor;
import lejos.robotics.SampleProvider;

public class MoveForward extends Thread {
	DataExchange DEObj;

	private static EV3LargeRegulatedMotor leftWheel;
	private static EV3LargeRegulatedMotor rightWheel;

	private static EV3ColorSensor colorSensor;
	private static SampleProvider spColor;
	private static float[] sample;

	public MoveForwards(DataExchange DE) {
		DEObj = DE;
		leftWheel = new EV3LargeRegulatedMotor(MotorPort.A);
		rightWheel = new EV3LargeRegulatedMotor(MotorPort.D);

		colorSensor = new EV3ColorSensor(SensorPort.S2);
		spColor = colorSensor.getRedMode();
		sample = new float[spColor.sampleSize()];

		leftWheel.setSpeed(200);
		rightWheel.setSpeed(200);
	}

	public void run() {
		leftWheel.setSpeed(200);
		rightWheel.setSpeed(200);
		while (true) {

			spColor.fetchSample(sample, 0);
			float checkColor = sample[0];
			if (DEObj.getIsObstacleDetected() == false) {
				if (checkColor < 0.1f) {

					leftWheel.setSpeed(200);
					rightWheel.setSpeed(120);

					leftWheel.backward();
					rightWheel.forward();

				} else {
					leftWheel.setSpeed(120);
					rightWheel.setSpeed(200);
					leftWheel.forward();
					rightWheel.backward();
				}
				leftWheel.forward();
				rightWheel.forward();
			}
			
			else {
				leftWheel.forward();
				rightWheel.backward();

				leftWheel.setSpeed(200);
				rightWheel.setSpeed(200);

				// adjust time to get a 90% turn.
				try {
					Thread.sleep(700);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}

				leftWheel.stop();
				rightWheel.stop();

				// set right motor back to forward motion.
				leftWheel.forward();
				rightWheel.forward();
				// adjust time
				try {
					Thread.sleep(2000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				
				// make the left turn.

				leftWheel.backward();
				rightWheel.forward();


				// adjust time to get a 90% turn.
				try {
					Thread.sleep(800);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				
				
				leftWheel.forward();
				rightWheel.forward();

				try {
					Thread.sleep(5500);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				
				// make the left turn.
				leftWheel.backward();
				rightWheel.forward();

				// adjust time to get a 90% turn.
				try {
					Thread.sleep(800);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}

				leftWheel.forward();
				rightWheel.forward();

				try {
					Thread.sleep(2000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				// make the right turn.
				leftWheel.forward();
				rightWheel.backward();


				// adjust time to get a 90% turn.
				try {
					Thread.sleep(700);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}	

//				Drive Square ends
			}
			}
			
		}
	}

}
